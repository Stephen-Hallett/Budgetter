version: "3.8"

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ${POSTGRES_DB}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PW}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/initdb.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - transaction_network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PW}
      POSTGRES_HOST: postgres.container_name
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "${BACKEND_PORT}:8000"
    healthcheck:
      test: curl --fail http://localhost:8000/health || exit 1
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - transaction_network

  models:
    build:
      context: .
      dockerfile: models/Dockerfile
    container_name: models
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PW}
      POSTGRES_HOST: postgres.container_name
      POSTGRES_PORT: ${POSTGRES_PORT}
      MODELS_PORT: ${MODELS_PORT}
    ports:
      - "${MODELS_PORT}:${MODELS_PORT}"
    networks:
      - transaction_network

volumes:
  postgres_data:
    driver: local

networks:
  transaction_network:
    driver: bridge
